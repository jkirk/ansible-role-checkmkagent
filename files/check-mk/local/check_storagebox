#!/bin/bash

set -e -E -u -o pipefail

export TZ=UTC
export LANG=C

PN=$(basename "$0")

# defaults
TIMEOUT=2  # timeout in seconds
USAGE_WARN=80
USAGE_CRIT=90

if ! command -v jq &>/dev/null ; then
  echo "2 ${PN} - Error: jq binary not present."
  exit 1
fi

# if ! command -v bc &>/dev/null ; then
#   echo "2 ${PN} - Error: bc binary not present."
#   exit 1
# fi

# move to config?
if [ -r "${MK_CONFDIR:-/etc/check_mk}/${PN}" ] ; then
  # shellcheck source=/dev/null
  . "${MK_CONFDIR:-/etc/check_mk}/${PN}"
else
  echo "2 ${PN} - Error: configuration file ${MK_CONFDIR:-/etc/check_mk}/${PN} does not exist"
  exit 1
fi

if [ -z "${USERNAME:-}" ] ; then
  echo "2 ${PN} - Error: forgot to configure USERNAME=... in '${MK_CONFDIR:-/etc/check_mk}/${PN}'?"
  exit 1
fi

if [ -z "${PASSWORD}" ] ; then
  echo "2 ${PN} - Error: forgot to configure PASSWORD=... in '${MK_CONFDIR:-/etc/check_mk}/${PN}'?"
  exit 1
fi

# if STORAGEBOX is unconfigured, then derive storagebox ID from script name
if [ -z "${STORAGEBOX:-}" ] ; then
  STORAGEBOX="${PN#check_storagebox_}" ; STORAGEBOX="${STORAGEBOX%%_*}"
fi

if [ -z "${STORAGEBOX:-}" ] ; then
  echo "2 ${PN} - Error: could not identify storagebox ID (either use check_storagebox_ID or set STORAGEBOX=... in ${MK_CONFDIR:-/etc/check_mk}/${PN}"
  exit 1
fi

# Rounding Numbers with bc in Bash
# round() taken from: https://stackoverflow.com/a/26864946

# round() is only needed if - for any reason - we want to calculate usage_in_percent (see below)
# round() {
#     # $1 is expression to round (should be a valid bc expression)
#     # $2 is number of decimal figures (optional). Defaults to 2 if none given
#     local df=${2:-2}
#     printf '%.*f\n' "$df" "$(bc -l <<< "a=$1; if(a>0) a+=5/10^($df+1) else if (a<0) a-=5/10^($df+1); scale=$df; a/1")"
# }

OUTPUT="$(mktemp)"

parse_output() {
  if [[ "$(jq '.error' < "${OUTPUT}")" != "null" ]] ; then
    result="1 ${PN} - Error fetching storagebox data via API :-/"
    return 0
  fi

  disk_quota=$(jq '.storagebox.disk_quota' "${OUTPUT}")
  disk_usage=$(jq '.storagebox.disk_usage' "${OUTPUT}")

  # we get information for space in MB but need to convert it to bytes for check-mk RRD/metrics
  disk_quota_bytes=$(( disk_quota * 1024 * 1024))
  disk_usage_bytes=$(( disk_usage * 1024 * 1024))
  disk_usage_warn=$(( disk_quota_bytes * USAGE_WARN / 100))
  disk_usage_crit=$(( disk_quota_bytes * USAGE_CRIT / 100))

  # JFR: calculate disk free:
  # disk_free_bytes=$(( disk_quota_bytes - disk_usage_bytes ))

  # JFR: calculate with maximal precision but output with two decimals only
  # usage_in_percent=$(round "${disk_usage} / ${disk_quota} * 100" 2)

  # Local checks syntax:
  # https://docs.checkmk.com/latest/en/localchecks.html#dynamic_state
  #
  # performance metrics format:
  # valuename=value;warn_upper;crit_upper
  # valuename=value;warn_lower:warn_upper;crit_lower:crit_upper

  # Perfomance data and graphing documentation:
  # https://docs.checkmk.com/latest/en/graphing.html

  # The metrics + graphs (fs_used, fs_size) are defined here:
  # /opt/omd/sites/synpros/version/lib/python3/cmk/gui/plugins/metrics/fs.py

  result="P ${PN} fs_used=${disk_usage_bytes};${disk_usage_warn};${disk_usage_crit} fs_size=${disk_quota_bytes}"
}

timeout --kill-after=3 "${TIMEOUT}" curl --silent curl -s -u "${USERNAME}:${PASSWORD}" "https://robot-ws.your-server.de/storagebox/${STORAGEBOX}" > "${OUTPUT}"
# NOTE: we get exit code 124 if the curl cmdline timed out
if [[ $? -eq 124 ]] ; then
  echo "1 ${PN} - Timeout - querying of Hetzner StorageBox API didn't finish within timeout [$TIMEOUT]"
else
  parse_output
  echo "${result:-unhandled error}"
fi

rm -f "${OUTPUT}"
