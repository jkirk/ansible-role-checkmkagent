#!/bin/bash
set -eu -o pipefail

# no wordpress sites? don't report anything then
if ! ls /srv/www/*/wordpress &>/dev/null && ! ls /srv/www/*/wp-admin &>/dev/null ; then
  exit 0
fi

check_name='check_wordpress_version'

current_version=$(curl --max-time 4 -fsSL 'https://api.wordpress.org/core/version-check/1.7/' | jq -r '.offers[0].current' || echo "upstream-version-unknown")

site_version='unknown'
declare -A wp_problems
declare -a wp_sites

shopt -s nullglob
for site in /srv/www/*/wordpress /srv/www/*/wp-admin ; do
  # remove /wp-admin from path
  # i.e. site=/srv/www/${DOMAIN}/wordpress
  site=${site/%\/wp-admin/}

  # sanity check if site is really a directory
  [[ ! -d "${site}" ]] && continue
  # ignore wordpress backup sites (where the path contains "backup" (case insensitiv) or "_$DATE_" or ends with "_$DATE")
  [[ ${site^^} = *BACKUP* ]] && continue
  [[ ${site} =~ _[0-9]{8}$ ]] && continue
  [[ ${site} =~ _[0-9]{8}_ ]] && continue

  # ignore symlinks to avoid multiple checks of the same wordpress instance
  [[ -L "${site}" ]] && continue

  wp_sites+=("${site}")
  if ! [ -f "${site}/wp-includes/version.php" ] ; then
    echo "2 ${check_name} - Couldn't access ${site}/wp-includes/version.php"
    exit 1
  else
    site_version=$(awk '/^\$wp_version/ {print $3}' "${site}/wp-includes/version.php" | tr -d ";'")
    if [ "$current_version" != "$site_version" ] ; then
      wp_problems[$site]+="$site_version != $current_version"
    fi
  fi
done

declare -a message
for site in ${!wp_problems[*]} ; do
  message+=( "$site (${wp_problems[$site]});" )
done

if [ -n "${message:-}" ] ; then
  echo "1 ${check_name} - Problems found with ${#wp_sites[@]} wordpress site(s)" "${message[@]}"
else
  echo "0 ${check_name} - No known problems found with ${#wp_sites[@]} wordpress site(s)" "${wp_sites[@]}"
fi
